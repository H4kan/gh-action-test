# For information about setting up your repo for this CI, please see README.md
# Author: H4kan

name: GladiatorsCI

on:
  push:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Check ssh-agent
      run: which ssh-agent || ( apt-get update -y && apt-get install openssh-client  -y )

    - name: Install dependencies
      run: npm install

    
    - name: Run the tests
      run: |
       touch /tmp/issueText.txt
       npm run test 2>/tmp/issueText.txt

    - name: Push to production
      run: |
        git push -f origin develop:production
        
    - name: Setup username to open issue
      if: ${{ failure() }}
      run: |
        echo ::set-env name=username::$(git log -n 1 -s --format='%an')

    - name: Setup issue info to open issue
      if: ${{ failure() }}
      id: issue
      uses: juliangruber/read-file-action@v1
      with:
        path: /tmp/issueText.txt

    - name: Opening issue
      if: ${{ failure() }}
      uses: rishabhgupta/git-action-issue@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        title: Tests failed
        body: ${{ steps.issue.outputs.content }}
        assignees: |
          ${{ env.username }}

    - name: Cleanup
      if: ${{ always() }}
      run: rm /tmp/issueText.txt
    
    - name: Build app
      run: npm run build

    - name: Deploy to production-build
      uses: crazy-max/ghaction-github-pages@v2
      with:
        target_branch: production-build
        build_dir: build
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Disable Host key checking
      run: |
        mkdir -p ~/.ssh
        touch ~/.ssh/config
        echo -e "Host *\n\tStrictHostKeyChecking no\n\n" >> ~/.ssh/config
        
    - name: Remove old build from AWS
      run: |
        touch /tmp/rmCommand.sh
        echo "rm -Rf /home/${{ secrets.AWS_USER }}/${{ secrets.AWS_BUILD_PATH }}" > /tmp/rmCommand.sh
        eval $(ssh-agent -s)
        echo "${{ secrets.AWS_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
        ssh "${{ secrets.AWS_USER }}@${{ secrets.AWS_REMOTE }}" 'bash' < /tmp/rmCommand.sh

    - name: Deploy build to AWS  
      uses: horochx/deploy-via-scp@master
      with:
        local: build 
        remote: /home/${{ secrets.AWS_USER }}/${{ secrets.AWS_BUILD_PATH }}
        host: ${{ secrets.AWS_REMOTE }} 
        user: ${{ secrets.AWS_USER }} 
        key: ${{ secrets.AWS_PRIVATE_KEY }}



      
    
